// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: src/proto/book.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "book";

export interface FindBookByIdDto {
  id: number;
}

export interface FindBookDto {
  bookName?: string | undefined;
  publishBy?: string | undefined;
  publishYear?: number | undefined;
  author?: string | undefined;
  limit?: number | undefined;
}

export interface CreateBookDto {
  bookName: string;
  publishBy: string;
  publishYear: number;
  author: string;
}

export interface UpdateBookDto {
  id: number;
  bookName?: string | undefined;
  publishBy?: string | undefined;
  publishYear?: number | undefined;
  author?: string | undefined;
}

export interface BookListResponse {
  bookList: Book[];
}

export interface BookResponse {
  book: Book | undefined;
}

export interface Book {
  id: number;
  bookName: string;
  publishBy: string;
  publishYear: number;
  author: string;
}

export const BOOK_PACKAGE_NAME = "book";

export interface BookServiceClient {
  create(request: CreateBookDto): Observable<Book>;

  findOneById(request: FindBookByIdDto): Observable<Book>;

  update(request: UpdateBookDto): Observable<Book>;

  remove(request: FindBookByIdDto): Observable<Book>;

  findAll(request: FindBookDto): Observable<BookListResponse>;
}

export interface BookServiceController {
  create(request: CreateBookDto): Promise<Book> | Observable<Book> | Book;

  findOneById(request: FindBookByIdDto): Promise<Book> | Observable<Book> | Book;

  update(request: UpdateBookDto): Promise<Book> | Observable<Book> | Book;

  remove(request: FindBookByIdDto): Promise<Book> | Observable<Book> | Book;

  findAll(request: FindBookDto): Promise<BookListResponse> | Observable<BookListResponse> | BookListResponse;
}

export function BookServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "findOneById", "update", "remove", "findAll"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BookService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BookService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BOOK_SERVICE_NAME = "BookService";
